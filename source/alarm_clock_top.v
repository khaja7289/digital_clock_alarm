/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module alarm_clock_top(clock, key, reset, time_button, alarm_button, fastwatch, ms_hour, ls_hour, ms_minute, ls_minute, alarm_sound);
  input alarm_button;
  output alarm_sound;
  wire [3:0] alarm_time_ls_hr;
  wire [3:0] alarm_time_ls_min;
  wire [3:0] alarm_time_ms_hr;
  wire [3:0] alarm_time_ms_min;
  input clock;
  wire [3:0] current_time_ls_hr;
  wire [3:0] current_time_ls_min;
  wire [3:0] current_time_ms_hr;
  wire [3:0] current_time_ms_min;
  input fastwatch;
  input [3:0] key;
  wire [3:0] key_buffer_ls_hr;
  wire [3:0] key_buffer_ls_min;
  wire [3:0] key_buffer_ms_hr;
  wire [3:0] key_buffer_ms_min;
  wire load_new_a;
  wire load_new_c;
  output [7:0] ls_hour;
  output [7:0] ls_minute;
  output [7:0] ms_hour;
  output [7:0] ms_minute;
  wire one_minute;
  wire one_second;
  input reset;
  wire reset_count;
  wire shift;
  wire show_a;
  wire show_current_time;
  input time_button;
  alarm_reg alreg1 (
    .alarm_time_ls_hr(alarm_time_ls_hr),
    .alarm_time_ls_min(alarm_time_ls_min),
    .alarm_time_ms_hr(alarm_time_ms_hr),
    .alarm_time_ms_min(alarm_time_ms_min),
    .clock(clock),
    .load_new_alarm(load_new_a),
    .new_alarm_ls_hr(key_buffer_ls_hr),
    .new_alarm_ls_min(key_buffer_ls_min),
    .new_alarm_ms_hr(key_buffer_ms_hr),
    .new_alarm_ms_min(key_buffer_ms_min),
    .reset(reset)
  );
  counter count1 (
    .clk(clock),
    .current_time_ls_hr(current_time_ls_hr),
    .current_time_ls_min(current_time_ls_min),
    .current_time_ms_hr(current_time_ms_hr),
    .current_time_ms_min(current_time_ms_min),
    .load_new_c(load_new_c),
    .new_current_time_ls_hr(key_buffer_ls_hr),
    .new_current_time_ls_min(key_buffer_ls_min),
    .new_current_time_ms_hr(key_buffer_ms_hr),
    .new_current_time_ms_min(key_buffer_ms_min),
    .one_minute(one_minute),
    .reset(reset)
  );
  fsm fsm1 (
    .alarm_button(alarm_button),
    .clock(clock),
    .key(key),
    .load_new_a(load_new_a),
    .load_new_c(load_new_c),
    .one_second(one_second),
    .reset(reset),
    .reset_count(reset_count),
    .shift(shift),
    .show_a(show_a),
    .show_new_time(show_current_time),
    .time_button(time_button)
  );
  keyreg keyreg1 (
    .clock(clock),
    .key(key),
    .key_buffer_ls_hr(key_buffer_ls_hr),
    .key_buffer_ls_min(key_buffer_ls_min),
    .key_buffer_ms_hr(key_buffer_ms_hr),
    .key_buffer_ms_min(key_buffer_ms_min),
    .reset(reset),
    .shift(shift)
  );
  lcd_driver_4 lcd_disp (
    .alarm_time_ls_hr(alarm_time_ls_hr),
    .alarm_time_ls_min(alarm_time_ls_min),
    .alarm_time_ms_hr(alarm_time_ms_hr),
    .alarm_time_ms_min(alarm_time_ms_min),
    .current_time_ls_hr(current_time_ls_hr),
    .current_time_ls_min(current_time_ls_min),
    .current_time_ms_hr(current_time_ms_hr),
    .current_time_ms_min(current_time_ms_min),
    .display_ls_hr(ls_hour),
    .display_ls_min(ls_minute),
    .display_ms_hr(ms_hour),
    .display_ms_min(ms_minute),
    .key_ls_hr(key_buffer_ls_hr),
    .key_ls_min(key_buffer_ls_min),
    .key_ms_hr(key_buffer_ms_hr),
    .key_ms_min(key_buffer_ms_min),
    .show_a(show_a),
    .show_current_time(show_current_time),
    .sound_a(alarm_sound)
  );
  timegen tgen1 (
    .clock(clock),
    .fastwatch(fastwatch),
    .one_minute(one_minute),
    .one_second(one_second),
    .reset(reset),
    .reset_count(reset_count)
  );
endmodule

module alarm_reg(new_alarm_ms_hr, new_alarm_ls_hr, new_alarm_ms_min, new_alarm_ls_min, load_new_alarm, clock, reset, alarm_time_ms_hr, alarm_time_ls_hr, alarm_time_ms_min, alarm_time_ls_min);
  reg [3:0] _0_;
  reg [3:0] _1_;
  reg [3:0] _2_;
  reg [3:0] _3_;
  output [3:0] alarm_time_ls_hr;
  reg [3:0] alarm_time_ls_hr;
  output [3:0] alarm_time_ls_min;
  reg [3:0] alarm_time_ls_min;
  output [3:0] alarm_time_ms_hr;
  reg [3:0] alarm_time_ms_hr;
  output [3:0] alarm_time_ms_min;
  reg [3:0] alarm_time_ms_min;
  input clock;
  input load_new_alarm;
  input [3:0] new_alarm_ls_hr;
  input [3:0] new_alarm_ls_min;
  input [3:0] new_alarm_ms_hr;
  input [3:0] new_alarm_ms_min;
  input reset;
  always @* begin
    _2_ = alarm_time_ms_hr;
    _0_ = alarm_time_ls_hr;
    _3_ = alarm_time_ms_min;
    _1_ = alarm_time_ls_min;
    casez (reset)
      1'h1:
        begin
          _2_ = 4'h0;
          _0_ = 4'h0;
          _3_ = 4'h0;
          _1_ = 4'h0;
        end
      default:
          casez (load_new_alarm)
            1'h1:
              begin
                _2_ = new_alarm_ms_hr;
                _0_ = new_alarm_ls_hr;
                _3_ = new_alarm_ms_min;
                _1_ = new_alarm_ls_min;
              end
            default:
                /* empty */;
          endcase
    endcase
  end
  always @(posedge clock) begin
      alarm_time_ms_hr <= _2_;
      alarm_time_ls_hr <= _0_;
      alarm_time_ms_min <= _3_;
      alarm_time_ls_min <= _1_;
  end
  always @(posedge reset) begin
      alarm_time_ms_hr <= _2_;
      alarm_time_ls_hr <= _0_;
      alarm_time_ms_min <= _3_;
      alarm_time_ls_min <= _1_;
  end
endmodule

module counter(clk, reset, one_minute, load_new_c, new_current_time_ms_hr, new_current_time_ms_min, new_current_time_ls_hr, new_current_time_ls_min, current_time_ms_hr, current_time_ms_min, current_time_ls_hr, current_time_ls_min);
  reg [3:0] _00_;
  reg [3:0] _01_;
  reg [3:0] _02_;
  reg [3:0] _03_;
  wire [3:0] _04_;
  wire [3:0] _05_;
  wire [3:0] _06_;
  wire [3:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input clk;
  output [3:0] current_time_ls_hr;
  reg [3:0] current_time_ls_hr;
  output [3:0] current_time_ls_min;
  reg [3:0] current_time_ls_min;
  output [3:0] current_time_ms_hr;
  reg [3:0] current_time_ms_hr;
  output [3:0] current_time_ms_min;
  reg [3:0] current_time_ms_min;
  input load_new_c;
  input [3:0] new_current_time_ls_hr;
  input [3:0] new_current_time_ls_min;
  input [3:0] new_current_time_ms_hr;
  input [3:0] new_current_time_ms_min;
  input one_minute;
  input reset;
  assign _04_ = current_time_ms_hr + 1'h1;
  assign _05_ = current_time_ls_hr + 1'h1;
  assign _06_ = current_time_ms_min + 1'h1;
  assign _07_ = current_time_ls_min + 1'h1;
  assign _08_ = current_time_ms_min == 4'h5;
  assign _09_ = current_time_ls_min == 4'h9;
  assign _10_ = current_time_ls_min == 4'h9;
  assign _11_ = one_minute == 32'd1;
  assign _12_ = current_time_ms_hr == 4'h2;
  assign _13_ = current_time_ms_min == 4'h5;
  assign _14_ = current_time_ls_hr == 4'h3;
  assign _15_ = current_time_ls_min == 4'h9;
  assign _16_ = current_time_ls_hr == 4'h9;
  assign _17_ = current_time_ms_min == 4'h5;
  assign _18_ = current_time_ls_min == 4'h9;
  assign _19_ = _08_ && _09_;
  assign _20_ = _12_ && _13_;
  assign _21_ = _22_ && _15_;
  assign _22_ = _20_ && _14_;
  assign _23_ = _16_ && _17_;
  assign _24_ = _23_ && _18_;
  always @* begin
    _03_ = current_time_ms_min;
    _02_ = current_time_ms_hr;
    _00_ = current_time_ls_hr;
    _01_ = current_time_ls_min;
    casez (reset)
      1'h1:
        begin
          _02_ = 4'h0;
          _03_ = 4'h0;
          _00_ = 4'h0;
          _01_ = 4'h0;
        end
      default:
          casez (load_new_c)
            1'h1:
              begin
                _02_ = new_current_time_ms_hr;
                _03_ = new_current_time_ms_min;
                _00_ = new_current_time_ls_hr;
                _01_ = new_current_time_ls_min;
              end
            default:
                casez (_11_)
                  1'h1:
                      casez (_21_)
                        1'h1:
                          begin
                            _02_ = 4'h0;
                            _03_ = 4'h0;
                            _00_ = 4'h0;
                            _01_ = 4'h0;
                          end
                        default:
                            casez (_24_)
                              1'h1:
                                begin
                                  _02_ = _04_;
                                  _00_ = 4'h0;
                                  _03_ = 4'h0;
                                  _01_ = 4'h0;
                                end
                              default:
                                  casez (_19_)
                                    1'h1:
                                      begin
                                        _00_ = _05_;
                                        _03_ = 4'h0;
                                        _01_ = 4'h0;
                                      end
                                    default:
                                        casez (_10_)
                                          1'h1:
                                            begin
                                              _03_ = _06_;
                                              _01_ = 4'h0;
                                            end
                                          default:
                                              _01_ = _07_;
                                        endcase
                                  endcase
                            endcase
                      endcase
                  default:
                      /* empty */;
                endcase
          endcase
    endcase
  end
  always @(posedge clk) begin
      current_time_ms_min <= _03_;
      current_time_ms_hr <= _02_;
      current_time_ls_hr <= _00_;
      current_time_ls_min <= _01_;
  end
  always @(posedge reset) begin
      current_time_ms_min <= _03_;
      current_time_ms_hr <= _02_;
      current_time_ls_hr <= _00_;
      current_time_ls_min <= _01_;
  end
endmodule

module fsm(clock, reset, one_second, time_button, alarm_button, key, reset_count, load_new_a, show_a, show_new_time, load_new_c, shift);
  reg [3:0] _00_;
  reg [3:0] _01_;
  reg [2:0] _02_;
  reg [2:0] _03_;
  reg [2:0] _04_;
  reg [2:0] _05_;
  reg [2:0] _06_;
  reg [2:0] _07_;
  reg [2:0] _08_;
  reg [2:0] _09_;
  reg [2:0] _10_;
  reg [2:0] _11_;
  reg [2:0] _12_;
  reg [2:0] _13_;
  wire [3:0] _14_;
  wire [3:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire [31:0] _41_;
  wire [31:0] _42_;
  wire [31:0] _43_;
  wire [31:0] _44_;
  wire [31:0] _45_;
  wire [31:0] _46_;
  wire [31:0] _47_;
  input alarm_button;
  input clock;
  reg [3:0] count1;
  reg [3:0] count2;
  input [3:0] key;
  output load_new_a;
  output load_new_c;
  reg [2:0] next_state;
  input one_second;
  reg [2:0] pre_state;
  input reset;
  output reset_count;
  output shift;
  output show_a;
  output show_new_time;
  input time_button;
  wire time_out;
  assign _14_ = count2 + 1'h1;
  assign _15_ = count1 + 1'h1;
  assign _16_ = count2 == 32'd9;
  assign _17_ = count1 == 32'd9;
  assign _18_ = count2 == 32'd9;
  assign _19_ = key == 32'd10;
  assign _20_ = time_out == 32'd0;
  assign _21_ = time_out == 32'd0;
  assign _22_ = pre_state == 3'h1;
  assign _23_ = pre_state == 3'h2;
  assign _24_ = pre_state == 3'h6;
  assign _25_ = pre_state == 3'h3;
  assign _26_ = pre_state == 3'h4;
  assign _27_ = pre_state == 3'h5;
  assign _28_ = pre_state == 3'h5;
  assign _29_ = pre_state == 3'h2;
  assign _30_ = pre_state == 3'h1;
  assign _31_ = count1 == 32'd9;
  assign _32_ = pre_state == 3'h6;
  assign _33_ = ! alarm_button;
  assign _34_ = ! _30_;
  assign _35_ = ! _32_;
  assign _36_ = _17_ || _18_;
  assign _37_ = _22_ || _23_;
  assign _38_ = _37_ || _24_;
  assign _39_ = key != 32'd10;
  assign _40_ = key != 32'd10;
  assign _41_ = _36_ ? 32'd0 : 32'd1;
  assign _42_ = _38_ ? 32'd1 : 32'd0;
  assign _43_ = _25_ ? 32'd1 : 32'd0;
  assign _44_ = _26_ ? 32'd1 : 32'd0;
  assign _45_ = _27_ ? 32'd1 : 32'd0;
  assign _46_ = _28_ ? 32'd1 : 32'd0;
  assign _47_ = _29_ ? 32'd1 : 32'd0;
  always @* begin
    _03_ = pre_state;
    casez (reset)
      1'h1:
          _03_ = 3'h0;
      default:
          _03_ = next_state;
    endcase
  end
  always @(posedge clock) begin
      pre_state <= _03_;
  end
  always @(posedge reset) begin
      pre_state <= _03_;
  end
  always @* begin
    _02_ = _05_;
    casez (pre_state)
      3'h0:
        begin
          _05_ = _06_;
          casez (alarm_button)
            1'h1:
              begin
                _06_ = 3'h3;
              end
            default:
              begin
                _06_ = _07_;
                casez (_39_)
                  1'h1:
                    begin
                      _07_ = 3'h2;
                    end
                  default:
                    begin
                      _07_ = 3'h0;
                    end
                endcase
              end
          endcase
        end
      3'h2:
        begin
          _05_ = 3'h6;
        end
      3'h6:
        begin
          _05_ = _08_;
          casez (_19_)
            1'h1:
              begin
                _08_ = 3'h1;
              end
            default:
              begin
                _08_ = _09_;
                casez (_20_)
                  1'h1:
                    begin
                      _09_ = 3'h0;
                    end
                  default:
                    begin
                      _09_ = 3'h6;
                    end
                endcase
              end
          endcase
        end
      3'h1:
        begin
          _05_ = _10_;
          casez (alarm_button)
            1'h1:
              begin
                _10_ = 3'h4;
              end
            default:
              begin
                _10_ = _11_;
                casez (time_button)
                  1'h1:
                    begin
                      _11_ = 3'h5;
                    end
                  default:
                    begin
                      _11_ = _12_;
                      casez (_21_)
                        1'h1:
                          begin
                            _12_ = 3'h0;
                          end
                        default:
                          begin
                            _12_ = _13_;
                            casez (_40_)
                              1'h1:
                                begin
                                  _13_ = 3'h2;
                                end
                              default:
                                begin
                                  _13_ = 3'h1;
                                end
                            endcase
                          end
                      endcase
                    end
                endcase
              end
          endcase
        end
      3'h3:
        begin
          _05_ = _04_;
          casez (_33_)
            1'h1:
              begin
                _04_ = 3'h0;
              end
            default:
              begin
                _04_ = 3'h3;
              end
          endcase
        end
      3'h4:
        begin
          _05_ = 3'h0;
        end
      3'h5:
        begin
          _05_ = 3'h0;
        end
      default:
        begin
          _05_ = 3'h0;
        end
    endcase
  end
  always @* begin
      next_state <= _02_;
  end
  always @* begin
    _00_ = count1;
    casez (reset)
      1'h1:
          _00_ = 4'h0;
      default:
          casez (_34_)
            1'h1:
                _00_ = 4'h0;
            default:
                casez (_31_)
                  1'h1:
                      _00_ = 4'h0;
                  default:
                      casez (one_second)
                        1'h1:
                            _00_ = _15_;
                        default:
                            /* empty */;
                      endcase
                endcase
          endcase
    endcase
  end
  always @(posedge clock) begin
      count1 <= _00_;
  end
  always @(posedge reset) begin
      count1 <= _00_;
  end
  always @* begin
    _01_ = count2;
    casez (reset)
      1'h1:
          _01_ = 4'h0;
      default:
          casez (_35_)
            1'h1:
                _01_ = 4'h0;
            default:
                casez (_16_)
                  1'h1:
                      _01_ = 4'h0;
                  default:
                      casez (one_second)
                        1'h1:
                            _01_ = _14_;
                        default:
                            /* empty */;
                      endcase
                endcase
          endcase
    endcase
  end
  always @(posedge clock) begin
      count2 <= _01_;
  end
  always @(posedge reset) begin
      count2 <= _01_;
  end
  assign time_out = _41_[0];
  assign show_new_time = _42_[0];
  assign show_a = _43_[0];
  assign load_new_a = _44_[0];
  assign load_new_c = _45_[0];
  assign reset_count = _46_[0];
  assign shift = _47_[0];
endmodule

module keyreg(reset, clock, shift, key, key_buffer_ls_min, key_buffer_ms_min, key_buffer_ls_hr, key_buffer_ms_hr);
  reg [3:0] _0_;
  reg [3:0] _1_;
  reg [3:0] _2_;
  reg [3:0] _3_;
  wire _4_;
  input clock;
  input [3:0] key;
  output [3:0] key_buffer_ls_hr;
  reg [3:0] key_buffer_ls_hr;
  output [3:0] key_buffer_ls_min;
  reg [3:0] key_buffer_ls_min;
  output [3:0] key_buffer_ms_hr;
  reg [3:0] key_buffer_ms_hr;
  output [3:0] key_buffer_ms_min;
  reg [3:0] key_buffer_ms_min;
  input reset;
  input shift;
  assign _4_ = shift == 32'd1;
  always @* begin
    _1_ = key_buffer_ls_min;
    _3_ = key_buffer_ms_min;
    _0_ = key_buffer_ls_hr;
    _2_ = key_buffer_ms_hr;
    casez (reset)
      1'h1:
        begin
          _1_ = 4'h0;
          _3_ = 4'h0;
          _0_ = 4'h0;
          _2_ = 4'h0;
        end
      default:
          casez (_4_)
            1'h1:
              begin
                _2_ = key_buffer_ls_hr;
                _0_ = key_buffer_ms_min;
                _3_ = key_buffer_ls_min;
                _1_ = key;
              end
            default:
                /* empty */;
          endcase
    endcase
  end
  always @(posedge clock) begin
      key_buffer_ls_min <= _1_;
      key_buffer_ms_min <= _3_;
      key_buffer_ls_hr <= _0_;
      key_buffer_ms_hr <= _2_;
  end
  always @(posedge reset) begin
      key_buffer_ls_min <= _1_;
      key_buffer_ms_min <= _3_;
      key_buffer_ls_hr <= _0_;
      key_buffer_ms_hr <= _2_;
  end
endmodule

module lcd_driver(alarm_time, current_time, show_alarm, show_new_time, key, display_time, sound_alarm);
  reg [7:0] _0_;
  reg [3:0] _1_;
  reg _2_;
  reg [7:0] _3_;
  reg [3:0] _4_;
  reg _5_;
  reg [3:0] _6_;
  wire _7_;
  input [3:0] alarm_time;
  input [3:0] current_time;
  output [7:0] display_time;
  reg [7:0] display_time;
  reg [3:0] display_value;
  input [3:0] key;
  input show_alarm;
  input show_new_time;
  output sound_alarm;
  reg sound_alarm;
  assign _7_ = current_time == alarm_time;
  always @* begin
    _1_ = _4_;
    _2_ = _5_;
    casez (show_new_time)
      1'h1:
        begin
          _4_ = key;
        end
      default:
        begin
          _4_ = _6_;
          casez (show_alarm)
            1'h1:
              begin
                _6_ = alarm_time;
              end
            default:
              begin
                _6_ = current_time;
              end
          endcase
        end
    endcase
    casez (_7_)
      1'h1:
        begin
          _5_ = 1'h1;
        end
      default:
        begin
          _5_ = 1'h0;
        end
    endcase
  end
  always @* begin
      sound_alarm <= _2_;
      display_value <= _1_;
  end
  always @* begin
    _0_ = _3_;
    casez (display_value)
      4'h0:
        begin
          _3_ = 8'h30;
        end
      4'h1:
        begin
          _3_ = 8'h31;
        end
      4'h2:
        begin
          _3_ = 8'h32;
        end
      4'h3:
        begin
          _3_ = 8'h33;
        end
      4'h4:
        begin
          _3_ = 8'h34;
        end
      4'h5:
        begin
          _3_ = 8'h35;
        end
      4'h6:
        begin
          _3_ = 8'h36;
        end
      4'h7:
        begin
          _3_ = 8'h37;
        end
      4'h8:
        begin
          _3_ = 8'h38;
        end
      4'h9:
        begin
          _3_ = 8'h39;
        end
      default:
        begin
          _3_ = 8'h3a;
        end
    endcase
  end
  always @* begin
      display_time <= _0_;
  end
endmodule

module lcd_driver_4(alarm_time_ms_hr, alarm_time_ls_hr, alarm_time_ms_min, alarm_time_ls_min, current_time_ms_hr, current_time_ls_hr, current_time_ms_min, current_time_ls_min, key_ms_hr, key_ls_hr, key_ms_min, key_ls_min, show_a, show_current_time, display_ms_hr, display_ls_hr, display_ms_min, display_ls_min, sound_a);
  wire _0_;
  wire _1_;
  wire _2_;
  input [3:0] alarm_time_ls_hr;
  input [3:0] alarm_time_ls_min;
  input [3:0] alarm_time_ms_hr;
  input [3:0] alarm_time_ms_min;
  input [3:0] current_time_ls_hr;
  input [3:0] current_time_ls_min;
  input [3:0] current_time_ms_hr;
  input [3:0] current_time_ms_min;
  output [7:0] display_ls_hr;
  output [7:0] display_ls_min;
  output [7:0] display_ms_hr;
  output [7:0] display_ms_min;
  input [3:0] key_ls_hr;
  input [3:0] key_ls_min;
  input [3:0] key_ms_hr;
  input [3:0] key_ms_min;
  input show_a;
  input show_current_time;
  output sound_a;
  wire sound_alarm1;
  wire sound_alarm2;
  wire sound_alarm3;
  wire sound_alarm4;
  assign _0_ = sound_alarm1 & sound_alarm2;
  assign _1_ = _0_ & sound_alarm3;
  assign _2_ = _1_ & sound_alarm4;
  lcd_driver LS_HR (
    .alarm_time(alarm_time_ls_hr),
    .current_time(current_time_ls_hr),
    .display_time(display_ls_hr),
    .key(key_ls_hr),
    .show_alarm(show_a),
    .show_new_time(show_current_time),
    .sound_alarm(sound_alarm2)
  );
  lcd_driver LS_MIN (
    .alarm_time(alarm_time_ls_min),
    .current_time(current_time_ls_min),
    .display_time(display_ls_min),
    .key(key_ls_min),
    .show_alarm(show_a),
    .show_new_time(show_current_time),
    .sound_alarm(sound_alarm4)
  );
  lcd_driver MS_HR (
    .alarm_time(alarm_time_ms_hr),
    .current_time(current_time_ms_hr),
    .display_time(display_ms_hr),
    .key(key_ms_hr),
    .show_alarm(show_a),
    .show_new_time(show_current_time),
    .sound_alarm(sound_alarm1)
  );
  lcd_driver MS_MIN (
    .alarm_time(alarm_time_ms_min),
    .current_time(current_time_ms_min),
    .display_time(display_ms_min),
    .key(key_ms_min),
    .show_alarm(show_a),
    .show_new_time(show_current_time),
    .sound_alarm(sound_alarm3)
  );
  assign sound_a = _2_;
endmodule

module timegen(clock, reset, reset_count, fastwatch, one_second, one_minute);
  reg [13:0] _00_;
  reg _01_;
  reg _02_;
  reg _03_;
  reg _04_;
  wire [13:0] _05_;
  wire _06_;
  wire _07_;
  input clock;
  reg [13:0] count;
  input fastwatch;
  output one_minute;
  reg one_minute;
  reg one_minute_reg;
  output one_second;
  reg one_second;
  input reset;
  input reset_count;
  assign _05_ = count + 1'h1;
  assign _06_ = count == 14'h3bff;
  assign _07_ = count[7:0] == 8'hff;
  always @* begin
    _01_ = _04_;
    casez (fastwatch)
      1'h1:
        begin
          _04_ = one_second;
        end
      default:
        begin
          _04_ = one_minute_reg;
        end
    endcase
  end
  always @* begin
      one_minute <= _01_;
  end
  always @* begin
    _00_ = count;
    _02_ = one_minute_reg;
    casez (reset)
      1'h1:
        begin
          _00_ = 14'h0000;
          _02_ = 1'h0;
        end
      default:
          casez (reset_count)
            1'h1:
              begin
                _00_ = 14'h0000;
                _02_ = 1'h0;
              end
            default:
                casez (_06_)
                  1'h1:
                    begin
                      _00_ = 14'h0000;
                      _02_ = 1'h1;
                    end
                  default:
                    begin
                      _00_ = _05_;
                      _02_ = 1'h0;
                    end
                endcase
          endcase
    endcase
  end
  always @(posedge clock) begin
      count <= _00_;
      one_minute_reg <= _02_;
  end
  always @(posedge reset) begin
      count <= _00_;
      one_minute_reg <= _02_;
  end
  always @* begin
    _03_ = one_second;
    casez (reset)
      1'h1:
          _03_ = 1'h0;
      default:
          casez (reset_count)
            1'h1:
                _03_ = 1'h0;
            default:
                casez (_07_)
                  1'h1:
                      _03_ = 1'h1;
                  default:
                      _03_ = 1'h0;
                endcase
          endcase
    endcase
  end
  always @(posedge clock) begin
      one_second <= _03_;
  end
  always @(posedge reset) begin
      one_second <= _03_;
  end
endmodule
